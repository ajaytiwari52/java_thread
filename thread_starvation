````
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

class ProducerResource implements Runnable {
  private Queue<Integer> queue;
  private int maxSize;

  public ProducerResource(Queue<Integer> queue, int maxSize) {
    this.queue = queue;
    this.maxSize = maxSize;
  }

  @Override
  public void run() {
    while (true) {
      synchronized (queue) {
        while (queue.size() == maxSize) {
          try {
            System.out.println(
                "Queue is full, "
                    + "Producer thread waiting for "
                    + "consumer to take something from queue");
            queue.wait();
          } catch (Exception ex) {
            ex.printStackTrace();
          }
        }
        Random random = new Random();
        int i = random.nextInt();
        System.out.println("Producing value : " + i);
        queue.add(i);
        queue.notifyAll();
      }
    }
  }
}

class Consumer implements Runnable {
  private Queue<Integer> queue;
  private int maxSize;

  public Consumer(Queue<Integer> queue, int maxSize) {
    this.queue = queue;
    this.maxSize = maxSize;
  }

  @Override
  public void run() {
    while (true) {
      synchronized (queue) {
        while (queue.isEmpty()) {
          System.out.println(
              "Queue is empty,"
                  + "Consumer thread is waiting"
                  + " for producer thread to put something in queue");
          try {
            queue.wait();
          } catch (Exception ex) {
            ex.printStackTrace();
          }
        }
        System.out.println("Consuming value : " + queue.remove());
        queue.notifyAll();
      }
    }
  }
}

public class ProducerConsumer {
  public static void main(String args[]) {
    System.out.println("How to use wait and notify method in Java");
    System.out.println("Solving Producer Consumper Problem");
    Queue<Integer> buffer = new LinkedList<>();
    int maxSize = 10;
    ProducerResource producer = new ProducerResource(buffer, maxSize);
    Consumer consumer = new Consumer(buffer, maxSize);
    Thread t1 = new Thread(producer, "PRODUCER");
    Thread t2 = new Thread(consumer, "CONSUMER");
    t1.start();
    t2.start();
  }
}

````
